// Mocks generated by Mockito 5.4.4 from annotations
// in investment_tracking/test/features/property_tracking/presentation/pages/property_list_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:investment_tracking/features/property_tracking/domain/entities/rental_event.dart'
    as _i6;
import 'package:investment_tracking/features/property_tracking/domain/repositories/property_repository.dart'
    as _i4;
import 'package:investment_tracking/features/property_tracking/domain/usecases/get_current_month_rental_events.dart'
    as _i2;
import 'package:investment_tracking/features/property_tracking/domain/usecases/mark_event_as_paid.dart'
    as _i3;
import 'package:investment_tracking/features/property_tracking/presentation/manager/property_list_notifier.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetCurrentMonthRentalEvents_0 extends _i1.SmartFake
    implements _i2.GetCurrentMonthRentalEvents {
  _FakeGetCurrentMonthRentalEvents_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMarkEventAsPaid_1 extends _i1.SmartFake
    implements _i3.MarkEventAsPaid {
  _FakeMarkEventAsPaid_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePropertyRepository_2 extends _i1.SmartFake
    implements _i4.PropertyRepository {
  _FakePropertyRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PropertyListNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropertyListNotifier extends _i1.Mock
    implements _i5.PropertyListNotifier {
  MockPropertyListNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetCurrentMonthRentalEvents get getCurrentMonthRentalEventsUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getCurrentMonthRentalEventsUseCase),
        returnValue: _FakeGetCurrentMonthRentalEvents_0(
          this,
          Invocation.getter(#getCurrentMonthRentalEventsUseCase),
        ),
      ) as _i2.GetCurrentMonthRentalEvents);

  @override
  _i3.MarkEventAsPaid get markEventAsPaidUseCase => (super.noSuchMethod(
        Invocation.getter(#markEventAsPaidUseCase),
        returnValue: _FakeMarkEventAsPaid_1(
          this,
          Invocation.getter(#markEventAsPaidUseCase),
        ),
      ) as _i3.MarkEventAsPaid);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  List<_i6.RentalEvent> get rentalEvents => (super.noSuchMethod(
        Invocation.getter(#rentalEvents),
        returnValue: <_i6.RentalEvent>[],
      ) as List<_i6.RentalEvent>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> fetchEvents() => (super.noSuchMethod(
        Invocation.method(
          #fetchEvents,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> markEventPaid(_i6.RentalEvent? eventToMarkPaid) =>
      (super.noSuchMethod(
        Invocation.method(
          #markEventPaid,
          [eventToMarkPaid],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetCurrentMonthRentalEvents].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentMonthRentalEvents extends _i1.Mock
    implements _i2.GetCurrentMonthRentalEvents {
  MockGetCurrentMonthRentalEvents() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.PropertyRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePropertyRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.PropertyRepository);

  @override
  _i7.Future<List<_i6.RentalEvent>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i7.Future<List<_i6.RentalEvent>>.value(<_i6.RentalEvent>[]),
      ) as _i7.Future<List<_i6.RentalEvent>>);
}

/// A class which mocks [MarkEventAsPaid].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarkEventAsPaid extends _i1.Mock implements _i3.MarkEventAsPaid {
  MockMarkEventAsPaid() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.PropertyRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePropertyRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.PropertyRepository);

  @override
  _i7.Future<void> call(_i6.RentalEvent? event) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [event],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
