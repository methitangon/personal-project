// Mocks generated by Mockito 5.4.4 from annotations
// in investment_tracking/test/features/property_tracking/presentation/pages/property_list_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:investment_tracking/features/property_tracking/domain/repositories/property_repository.dart'
    as _i4;
import 'package:investment_tracking/features/property_tracking/domain/usecases/get_properties_with_status.dart'
    as _i2;
import 'package:investment_tracking/features/property_tracking/domain/usecases/mark_rent_as_paid.dart'
    as _i3;
import 'package:investment_tracking/features/property_tracking/presentation/manager/property_list_notifier.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetPropertiesWithStatus_0 extends _i1.SmartFake
    implements _i2.GetPropertiesWithStatus {
  _FakeGetPropertiesWithStatus_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMarkRentAsPaid_1 extends _i1.SmartFake
    implements _i3.MarkRentAsPaid {
  _FakeMarkRentAsPaid_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePropertyRepository_2 extends _i1.SmartFake
    implements _i4.PropertyRepository {
  _FakePropertyRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PropertyListNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropertyListNotifier extends _i1.Mock
    implements _i5.PropertyListNotifier {
  MockPropertyListNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetPropertiesWithStatus get getPropertiesUseCase => (super.noSuchMethod(
        Invocation.getter(#getPropertiesUseCase),
        returnValue: _FakeGetPropertiesWithStatus_0(
          this,
          Invocation.getter(#getPropertiesUseCase),
        ),
      ) as _i2.GetPropertiesWithStatus);

  @override
  _i3.MarkRentAsPaid get markRentAsPaidUseCase => (super.noSuchMethod(
        Invocation.getter(#markRentAsPaidUseCase),
        returnValue: _FakeMarkRentAsPaid_1(
          this,
          Invocation.getter(#markRentAsPaidUseCase),
        ),
      ) as _i3.MarkRentAsPaid);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  List<_i2.PropertyStatusInfo> get properties => (super.noSuchMethod(
        Invocation.getter(#properties),
        returnValue: <_i2.PropertyStatusInfo>[],
      ) as List<_i2.PropertyStatusInfo>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> fetchProperties() => (super.noSuchMethod(
        Invocation.method(
          #fetchProperties,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> markPropertyAsPaid(String? propertyId) =>
      (super.noSuchMethod(
        Invocation.method(
          #markPropertyAsPaid,
          [propertyId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetPropertiesWithStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPropertiesWithStatus extends _i1.Mock
    implements _i2.GetPropertiesWithStatus {
  MockGetPropertiesWithStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.PropertyRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePropertyRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.PropertyRepository);

  @override
  _i6.Future<List<_i2.PropertyStatusInfo>> call(DateTime? month) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [month],
        ),
        returnValue: _i6.Future<List<_i2.PropertyStatusInfo>>.value(
            <_i2.PropertyStatusInfo>[]),
      ) as _i6.Future<List<_i2.PropertyStatusInfo>>);
}

/// A class which mocks [MarkRentAsPaid].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarkRentAsPaid extends _i1.Mock implements _i3.MarkRentAsPaid {
  MockMarkRentAsPaid() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.PropertyRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePropertyRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.PropertyRepository);

  @override
  _i6.Future<void> call(_i3.MarkRentAsPaidParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
