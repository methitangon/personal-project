// Mocks generated by Mockito 5.4.4 from annotations
// in investment_tracking/test/features/property_tracking/domain/usecases/get_properties_with_status_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:investment_tracking/features/property_tracking/domain/entities/property.dart'
    as _i4;
import 'package:investment_tracking/features/property_tracking/domain/entities/rental_event.dart'
    as _i5;
import 'package:investment_tracking/features/property_tracking/domain/repositories/property_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PropertyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropertyRepository extends _i1.Mock
    implements _i2.PropertyRepository {
  MockPropertyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Property>> getProperties() => (super.noSuchMethod(
        Invocation.method(
          #getProperties,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Property>>.value(<_i4.Property>[]),
      ) as _i3.Future<List<_i4.Property>>);

  @override
  _i3.Future<List<_i5.RentalEvent>> getRentalEventsForMonth(
          {required DateTime? month}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRentalEventsForMonth,
          [],
          {#month: month},
        ),
        returnValue:
            _i3.Future<List<_i5.RentalEvent>>.value(<_i5.RentalEvent>[]),
      ) as _i3.Future<List<_i5.RentalEvent>>);

  @override
  _i3.Future<void> markEventAsPaid({
    required String? eventId,
    required String? calendarId,
    required String? currentTitle,
    required DateTime? start,
    required DateTime? end,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #markEventAsPaid,
          [],
          {
            #eventId: eventId,
            #calendarId: calendarId,
            #currentTitle: currentTitle,
            #start: start,
            #end: end,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
